{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["$","require","App","props","state","on","r","g","b","toggleLED","bind","handleRangeInput","this","ajax","method","url","then","setState","res","range","Math","floor","e","currentTarget","value","data","className","style","color","fontSize","onClick","type","min","max","getRangeSliderVal","onChange","class","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAGMA,G,MAAIC,EAAQ,KA0HHC,E,YAvHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,IAAI,EACJC,EAAG,EACHC,EAAG,EACHC,EAAG,GAGL,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAVP,E,yEAgCN,IAAD,OACNE,KAAKR,MAAMC,GACbL,EAAEa,KAAK,CACLC,OAAQ,MACRC,IAAK,kBACJC,MAAK,WACN,EAAKC,SAAS,CACZZ,IAAI,OAIRL,EAAEa,KAAK,CACLC,OAAQ,MACRC,IAAK,iBACJC,MAAK,SAAAE,GAAG,OAAI,EAAKD,SAAS,CAC3BX,EAAGY,EAAIZ,EACPC,EAAGW,EAAIX,EACPC,EAAGU,EAAIV,EACPH,IAAI,S,wCAKQc,GAYhB,OAAOP,KAAKR,MAAMC,GAAKe,KAAKC,MAA0B,IAApBT,KAAKR,MAAMe,IAAgB,I,uCAG9CA,GAAQ,IAAD,OACtB,OAAO,SAAAG,GACA,EAAKlB,MAAMC,KAChB,EAAKY,SAAL,eACGE,EAAQG,EAAEC,cAAcC,MAAQ,MAEnCxB,EAAEa,KAAK,CACLC,OAAQ,OACRC,IAAK,aACLU,KAAM,CAAEnB,EAAG,EAAKF,MAAME,EAAGC,EAAG,EAAKH,MAAMG,EAAGC,EAAG,EAAKJ,MAAMI,S,+BAM5D,OACE,yBAAKkB,UAAU,4BACb,yBAAKA,UAAU,OAEb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,kBACXC,MAAO,CAAEC,MAAOhB,KAAKR,MAAMC,GAAK,QAAU,MAAOwB,SAAU,QAC3DC,QAASlB,KAAKH,aAGlB,yBAAKiB,UAAU,aACb,0CAEF,yBAAKA,UAAU,oBACb,2BAAOK,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMT,MAAOZ,KAAKsB,kBAAkB,KAAMC,SAAUvB,KAAKD,iBAAiB,KAAMyB,MAAM,SAASC,GAAG,YAEpI,yBAAKX,UAAU,aACb,4CAEF,yBAAKA,UAAU,oBACb,2BAAOK,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMT,MAAOZ,KAAKsB,kBAAkB,KAAMC,SAAUvB,KAAKD,iBAAiB,KAAMyB,MAAM,SAASC,GAAG,YAEpI,yBAAKX,UAAU,aACb,2CAEF,yBAAKA,UAAU,oBACb,2BAAOK,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMT,MAAOZ,KAAKsB,kBAAkB,KAAMC,SAAUvB,KAAKD,iBAAiB,KAAMyB,MAAM,SAASC,GAAG,kB,GAhH5HC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"js/main.b37bbed3.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nconst $ = require('jquery');\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      on: false,\n      r: 0,\n      g: 0,\n      b: 0\n    };\n\n    this.toggleLED = this.toggleLED.bind(this);\n    this.handleRangeInput = this.handleRangeInput.bind(this);\n  }\n\n  // componentDidMount() {\n  // $.ajax({\n  //   method: 'get',\n  //   url: '/turn_on_led'\n  // }).then(res => this.setState({\n  //   r: res.r,\n  //   g: res.g,\n  //   b: res.b,\n  //   on: true\n  // }));\n  // }\n\n  // componentWillUnmount() {\n  // $.ajax({\n  //   method: 'get',\n  //   url: '/turn_off_led'\n  // })\n  // }\n\n  toggleLED() {\n    if (this.state.on) {\n      $.ajax({\n        method: 'get',\n        url: '/turn_off_led'\n      }).then(() => {\n        this.setState({\n          on: false\n        })\n      })\n    } else {\n      $.ajax({\n        method: 'get',\n        url: '/turn_on_led'\n      }).then(res => this.setState({\n        r: res.r,\n        g: res.g,\n        b: res.b,\n        on: true\n      }));\n    }\n  }\n\n  getRangeSliderVal(range) {\n    // switch (range) {\n    //   case 'r':\n    //     return Math.floor()\n    //     break;\n    //   case 'g':\n    //     break;\n    //   case 'b':\n    //     break;\n    //   default:\n    //     break;\n    // }\n    return this.state.on ? Math.floor(this.state[range] * 255) : 0\n  }\n\n  handleRangeInput(range) {\n    return e => {\n      if (!this.state.on) return;\n      this.setState({\n        [range]: e.currentTarget.value / 255\n      });\n      $.ajax({\n        method: 'post',\n        url: 'update_led',\n        data: { r: this.state.r, g: this.state.g, b: this.state.b }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className='led-controller-container'>\n        <div className=\"App\">\n          {/* hello from react */}\n          <div className='center-me'>\n            <i className=\"fa fa-power-off\"\n              style={{ color: this.state.on ? 'green' : 'red', fontSize: '48px' }}\n              onClick={this.toggleLED}\n            ></i>\n          </div>\n          <div className='center-me'>\n            <p>Red Value:</p>\n          </div>\n          <div className='slider-container'>\n            <input type=\"range\" min=\"0\" max=\"255\" value={this.getRangeSliderVal('r')} onChange={this.handleRangeInput('r')} class=\"slider\" id=\"rrange\" />\n          </div>\n          <div className='center-me'>\n            <p>Green Value:</p>\n          </div>\n          <div className='slider-container'>\n            <input type=\"range\" min=\"0\" max=\"255\" value={this.getRangeSliderVal('g')} onChange={this.handleRangeInput('g')} class=\"slider\" id=\"grange\" />\n          </div>\n          <div className='center-me'>\n            <p>Blue Value:</p>\n          </div>\n          <div className='slider-container'>\n            <input type=\"range\" min=\"0\" max=\"255\" value={this.getRangeSliderVal('b')} onChange={this.handleRangeInput('b')} class=\"slider\" id=\"brange\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}